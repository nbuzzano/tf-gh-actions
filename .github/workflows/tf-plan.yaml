name: "Terraform Plan"

on:
  push:
    branches:
      - main
      - master
  pull_request:

env:
  # https://docs.github.com/es/actions/learn-github-actions/environment-variables
  # https://docs.github.com/es/actions/learn-github-actions/contexts
  TF_STATE_NAME: ${{ github.ref }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  

jobs:
  terraform-plan:
    name: "Terraform plan"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

        # en Gitlab-CI no estoy seguro que esten usando lo cacheado 
      - name: Cache APK_CACHE_DIR
        uses: actions/cache@v3
        env:
          APK_CACHE_DIR: "$GITHUB_WORKSPACE/.cache/apk"
        with:
          path: $APK_CACHE_DIR
          key: APK_CACHE_DIR
      
      - name: Run Terrascan
        id: terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_version: 'v14'
          policy_type: 'aws'
          only_warn: true
      
      - name: Install Terraform
        env:
          TERRAFORM_VERSION: "0.13.0"
        run: |
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        # quien pone contenido en TF_STATE_NAME.tfvars ??
        # GITLAB TIENE terraform plan -var-file=config/${TF_STATE_NAME}.tfvars
        # falta definirlo como resource group https://docs.gitlab.com/ee/ci/resource_groups/
        run: |
          terraform plan -out=terraform-plan-file
        continue-on-error: true
      
      - uses: actions/upload-artifact@v3
        with:
          name: echo "terraform-plan-${{ github.ref_name }}" | tr / -
          path: |
            terraform-plan-file

      - name: Terraform outputs
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1