name: "Terraform Apply"

on: [workflow_dispatch] 

concurrency:
  group: unique-concurrency-group

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  

jobs:
  terraform-apply:
    name: "Terraform apply"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Terraform
        env:
          TERRAFORM_VERSION: "0.13.0"
        run: |
          tf_version=$TERRAFORM_VERSION
          wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
      
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - name: Terraform Init
        id: init
        run: |
          cat << EOF > override.tf
          terraform {
            backend "s3" {
              bucket = "mybucket.tfstate"
              key    = "${{ env.BRANCH_NAME }}"
              region = "us-west-2"
            }
          }
          EOF
          terraform init
      
      - name: Get remote state
        uses: dflook/terraform-remote-state@v1
        id: remote-state
        with:
          backend_type: s3
          backend_config: |
            bucket=mybucket.tf-state
            key=${{ env.BRANCH_NAME }}
            region=us-west-2
        continue-on-error: true
      
      - name: Download Plan
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: tf-plan.yaml
          workflow_conclusion: success
          name: terraform-plan-${{ steps.extract_branch.outputs.branch }}
          
      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve -input=false terraform-plan-file
          terraform output -json
          terraform output -json > terraform-apply-output.json      

      - name: Bootstrap FluxCD
        id: bootstrap
        # borro instalacion kubectl, no se usa creo.
        run: |
          curl -s https://fluxcd.io/install.sh | bash
          flux -v
          
          aws eks --region $(cat terraform-apply-output.json | jq -r .cluster_region.value) update-kubeconfig \
            --name $(cat terraform-apply-output.json | jq -r .cluster_name.value) \
            --alias eks-cluster

          flux bootstrap gitlab  --context=eks-cluster \
            --owner=$(cat terraform-apply-output.json | jq -r .flux_git_owner.value) \
            --repository=$(cat terraform-apply-output.json | jq -r .flux_git_repo.value) \
            --branch=$(cat terraform-apply-output.json | jq -r .flux_git_branch.value) \
            --path=clusters/$(cat terraform-apply-output.json | jq -r .cluster_env.value) \
            --token-auth